{"version":3,"sources":["effects.js"],"names":["effectCreators","fn","args","name","forkId","matcher","action","selector","takeEverySaga","take","call","takes","forks","forkCounter","executors","undefined","value","runner","tmp","resolve","p","Promise","r","push","dispatch","i","length","type","splice","store","getState"],"mappings":"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","file":"effects.map","sourceRoot":"..","sourcesContent":["export const effectCreators = {\n    call: (fn, ...args) => ({name: \"call\", fn, args}),\n    fork: (fn, ...args) => ({name: \"fork\", fn, args}),\n    join: (forkId) => ({name: \"join\", forkId}),\n    take: (matcher) => ({name: \"take\", matcher}),\n    takeEvery: (matcher, fn, ...args) => ({name: \"takeEvery\", matcher, fn, args}),\n    put: (action) => ({name: \"put\", action}),\n    select: (selector) => ({name: \"select\", selector})\n};\n\nconst takeEverySaga = async function*(matcher, fn, args) {\n    while(1) {\n        yield effectCreators.take(matcher);\n        yield effectCreators.call(fn, ...args);\n    }\n};\n\nconst takes = [], forks = {};\nlet forkCounter = 0;\n\nexport const executors = store => runner => [\n    {\n        name: undefined,\n        fn: (value) => value\n    },\n    {\n        name: \"call\",\n        fn: ({fn, args}) => fn(...args)\n    },\n    {\n        name: \"fork\",\n        fn: ({fn, args}) => {\n            forks[forkCounter] = runner(fn, args);\n\n            return forkCounter++;\n        }\n    },\n    {\n        name: \"join\",\n        fn: ({forkId}) => {\n            const tmp = forks[forkId];\n            delete forks[forkId];\n\n            return tmp;\n        }\n    },\n    {\n        name: \"take\",\n        fn: ({matcher}) => {\n            let resolve;\n            const p = new Promise(r => resolve = r);\n            takes.push({matcher, resolve});\n    \n            return p;\n        }\n    },\n    {\n        name: \"takeEvery\",\n        fn: ({matcher, fn, args}) => {\n            forks[forkCounter] = runner(takeEverySaga, [matcher, fn, args]);\n\n            return forkCounter++;\n        }\n    },\n    {\n        name: \"put\",\n        fn: ({action}) => {\n            store.dispatch(action);\n            for(let i = takes.length - 1; i >= 0; i--) {\n                if(takes[i].matcher === action.type ||Â typeof takes[i].matcher === \"function\" \n                    && takes[i].matcher(action.type)) \n                {\n                    takes[i].resolve();\n                    takes.splice(i, 1);\n                }\n            }\n        }\n    },\n    {\n        name: \"select\",\n        fn: ({selector}) => selector(store.getState())\n    }\n];"]}