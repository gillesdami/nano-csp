{"version":3,"sources":["index.js"],"names":["runner","saga","args","executorsCreator","mocks","executors","undefined","response","logicIterator","next","done","value","find","m","matcher","mock","e","name","fn"],"mappings":"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","file":"index.map","sourceRoot":"..","sourcesContent":["export default async function runner(saga, args = [], executorsCreator = () => [], mocks = []) {\n    const logicIterator = saga(...args),\n        executors = executorsCreator((saga, args) => runner(saga, args, executorsCreator, mocks));\n    let response = undefined;\n\n    while(1) {\n        let {done, value} = await logicIterator.next(await response);\n\n        const mock = mocks.find(m => m.matcher(value));\n        if(mock) value = mock.value;\n        \n        response = value && executors.find(e => e.name === value.name).fn(value);\n\n        if(done) return value;\n    }\n};"]}